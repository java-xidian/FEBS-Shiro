　　模板方法模式是类的行为模式。准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，
然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。
这就是模板方法模式的用意。
　　1.模板方法模式是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。
　　2.模板方法模式需要开发抽象类和具体子类的设计师之间的协作。
一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。
代表这些具体逻辑步骤的方法称做基本方法(primitive method)；而将这些基本方法汇总起来的方法叫做模板方法(template method)，
这个设计模式的名字就是从此而来。
　　3.模板方法所代表的行为称为顶级行为，其逻辑称为顶级逻辑。模板方法模式的静态结构图如下所示：

---------------------------------------------
模板模式的关键是：子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑。
============================================
　　模板方法中的方法可以分为两大类：模板方法和基本方法。

　　模板方法
　　一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法。
　　一个抽象类可以有任意多个模板方法，而不限于一个。每一个模板方法都可以调用任意多个具体方法。

　　基本方法
　　基本方法又可以分为三种：抽象方法(Abstract Method)、具体方法(Concrete Method)和钩子方法(Hook Method)。
　　●　　抽象方法：一个抽象方法由抽象类声明，由具体子类实现。在Java语言里抽象方法以abstract关键字标示。
　　●　　具体方法：一个具体方法由抽象类声明并实现，而子类并不实现或置换。
　　●　　钩子方法：一个钩子方法由抽象类声明并实现，而子类会加以扩展。通常抽象类给出的实现是一个空实现，作为方法的默认实现。
在上面的例子中，AbstractTemplate是一个抽象类，它带有三个方法。
其中abstractMethod()是一个抽象方法，它由抽象类声明为抽象方法，并由子类实现；
hookMethod()是一个钩子方法，它由抽象类声明并提供默认实现，并且由子类置换掉。
concreteMethod()是一个具体方法，它由抽象类声明并实现。